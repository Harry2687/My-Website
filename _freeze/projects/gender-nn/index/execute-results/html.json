{
  "hash": "bdcb7487197113930bdcf01a7b2a1114",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Gender Classification using PyTorch\"\ndescription: \"Classification of faces into genders using a convolutional neural network with residual layers.\"\ncategories: [Gender Classification, Neural Networks, Python, PyTorch]\nauthor:\n  name: Harry Zhong\ndate: last-modified\nimage: cnn-layer.png\ndraft: false\nexecute:\n  freeze: auto\n---\n\n# Introduction\n\nNeural networks are cool, they can take complex tasks that are usually pretty easy for humans to do and automate them, given you have sufficient training data and computing power. In this project, we will explore how to make our own neural network, and attempt to predict the gender of faces.\n\n# Neural Networks\n\nTo get a basic understanding of how neural networks, I would recommend watching 3Blue1Brown's [YouTube playlist](https://youtu.be/aircAruvnKk?si=CbemO9CxNtSznhKJ){target=_blank} on neural networks. We will be applying the theory discussed in the playlist in Python using the PyTorch library.\n\n## Sample Data\n\nBefore we define our model architecture, we'll first load some data to enable us to visualise what the model is doing. We can do this using a couple of modules from `torchvision`.\n\n::: {#1e90d4f8 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nfrom torch.utils.data import DataLoader\n\n# Some functions we'll need later\nimport modules.functions as func\n```\n:::\n\n\nWe can then use our imported modules to create `Dataset` and `DataLoader` objects. The `Dataset` represents our image data, after applying a transformation which resizes our images to 128 by 128 pixels, converts to grayscale, and then converts the image to a tensor. The `DataLoader` object then creates an iterable object using our `Dataset`, which is useful for accessing our data in batches, this will help us later when we train our model.\n\n::: {#3d9a57cb .cell execution_count=2}\n``` {.python .cell-code}\n# Set device for GPU acceleration, if available.\ndevice = func.set_device()\n\nloader = transforms.Compose([\n    transforms.Resize([128, 128]),\n    transforms.Grayscale(1),\n    transforms.ToTensor()\n])\n\nmy_dataset = datasets.ImageFolder(\n    root='test_images/',\n    transform=loader\n)\n\nmy_dataset_loader = DataLoader(\n    my_dataset,\n    batch_size=len(my_dataset),\n    generator=torch.Generator(device=device)\n)\n```\n:::\n\n\nLet's set `images` and `labels` based on the first and only batch in our `DataLoader`.\n\n::: {#8224ef1e .cell execution_count=3}\n``` {.python .cell-code}\ndata = iter(my_dataset_loader)\nimages, labels = next(data)\n```\n:::\n\n\nWe can then access our images, which are currently tensors. We can display the image tensors using a simple wrapper function that uses `matplotlib.pyplot` under the hood.\n\n::: {#076ee1bb .cell execution_count=4}\n``` {.python .cell-code}\nfor i in range(len(images)):\n  func.imshow(images[i])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=424 height=415}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=424 height=415}\n:::\n:::\n\n\nWe now have Kratos and Freya as tensors! This will be useful later.\n\n## Model Architecture\n\nTo start, we'll need to determine the architecture, or combination of layers, that our neural network will use. I tested model architectures starting from basic multilayer perceptrons to various forms of convolutional neural network (CNN), and found that fairly basic CNNs worked well on training and testing data which are split from the same main data source. However, I found that most CNN architectures failed to generalise well, and had poor accuracy when used on images outside of the training and testing splits.\n\nThe final model I settled on was a form of residual neural network, which adds residual layers to CNNs. We can define the model using `torch`.\n\n::: {#28d053fd .cell execution_count=5}\n``` {.python .cell-code}\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Define recurring sequence of convolution, batch normalisation, and rectified linear activation function layers.\ndef conv_block(in_channels, out_channels, pool=False):\n    layers = [\n        nn.Conv2d(\n            in_channels, \n            out_channels, \n            kernel_size=3, \n            padding=1\n        ),\n        nn.BatchNorm2d(out_channels),\n        nn.ReLU()\n    ]\n    if pool:\n        layers.append(\n            nn.MaxPool2d(4)\n        )\n    return nn.Sequential(*layers)\n\nclass resnetModel_128(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        # Define convolution and residual layers based on conv_block function.\n        self.conv_1 = conv_block(1, 64)\n        self.res_1 = nn.Sequential(\n            conv_block(64, 64), \n            conv_block(64, 64)\n        )\n        self.conv_2 = conv_block(64, 256, pool=True)\n        self.res_2 = nn.Sequential(\n            conv_block(256, 256),\n            conv_block(256, 256)\n        )\n        self.conv_3 = conv_block(256, 512, pool=True)\n        self.res_3 = nn.Sequential(\n            conv_block(512, 512),\n            conv_block(512, 512)\n        )\n        self.conv_4 = conv_block(512, 1024, pool=True)\n        self.res_4 = nn.Sequential(\n            conv_block(1024, 1024),\n            conv_block(1024, 1024)\n        )\n\n        # Define classifier function using fully connected, dropout, and rectified linear activation function.\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(2*2*1024, 2048),\n            nn.Dropout(0.5),\n            nn.ReLU(),\n            nn.Linear(2048, 1024),\n            nn.Dropout(0.5),\n            nn.ReLU(),\n            nn.Linear(1024, 2)\n        )\n    \n    # Define forward function using functions initialised earlier, which outputs predictions.\n    def forward(self, x):\n        x = self.conv_1(x)\n        x = self.res_1(x) + x\n        x = self.conv_2(x)\n        x = self.res_2(x) + x\n        x = self.conv_3(x)\n        x = self.res_3(x) + x\n        x = self.conv_4(x)\n        x = self.res_4(x) + x\n        x = self.classifier(x)\n        x = F.softmax(x, dim=1)\n        return x\n```\n:::\n\n\nNow let's create an instance of `resnetModel_128` and define our classes.\n\n::: {#c84b2573 .cell execution_count=6}\n``` {.python .cell-code}\n# Set seed for reproducibility.\ntorch.manual_seed(2687)\nresnet = resnetModel_128()\nclasses = ('Female', 'Male')\n```\n:::\n\n\nWe now have `resnet` which is our model which we defined earlier, but with completely random parameters. Let's make a prediction based on the untrained model\n\n::: {#1628c803 .cell execution_count=7}\n``` {.python .cell-code}\nresnet.eval()\nwith torch.no_grad():\n  output = resnet.forward(images.to(device))\n  predicted = torch.max(output.data, 1)[1]\n\nfor i in range(len(predicted)):\n  print(f'Image: {my_dataset.imgs[i][0]}')\n  print(f'Prediction: {classes[predicted[i]]}')\n  print(f'{classes[0]} weight: {output[i][0]}')\n  print(f'{classes[1]} weight: {output[i][1]}\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImage: test_images/Female/freya.png\nPrediction: Female\nFemale weight: 0.5020168423652649\nMale weight: 0.4979831576347351\n\nImage: test_images/Male/kratos.png\nPrediction: Female\nFemale weight: 0.5018221139907837\nMale weight: 0.4981779158115387\n\n```\n:::\n:::\n\n\nAs expected, the model is doing nothing more than randomly guessing. Next, we'll explore how we can train our model and make it smarter.\n\n# Training\n\n## Dataset\n\n## Stochastic Gradient Descent\n\n# Results\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}