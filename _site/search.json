[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harry Zhong",
    "section": "",
    "text": "Hello and welcome to my website! I’m Harry, an Actuary (AIAA) working as a Data Analyst.\nThis website showcases my personal projects, achievements and plans for the future. If you want to know more about me, my work, or my projects, feel free to contact me via email or connect with me on LinkedIn.\nThanks for visiting!"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Harry Zhong",
    "section": "",
    "text": "Hello and welcome to my website! I’m Harry, an Actuary (AIAA) working as a Data Analyst.\nThis website showcases my personal projects, achievements and plans for the future. If you want to know more about me, my work, or my projects, feel free to contact me via email or connect with me on LinkedIn.\nThanks for visiting!"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Harry Zhong",
    "section": "Experience",
    "text": "Experience\n EBM Insurance & Risk | Data Intelligence Analyst | Nov 2022 - Present\n Actuaries Institute | Actuary Program | Jul 2023 - Oct 2023\n Curtin University | Bachelor of Science (Actuarial Science) (Honours) | Feb 2019 - Jun 2023"
  },
  {
    "objectID": "projects/spotify-analysis/index.html",
    "href": "projects/spotify-analysis/index.html",
    "title": "Analysis of My Spotify Data",
    "section": "",
    "text": "Note\n\n\n\nThis project is ongoing and is not currently complete.\n\n\n\nIntroduction\n\n\nData\n\n\nK-means\n\n\nConclusion\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(foreach)\n\n\nAttaching package: 'foreach'\n\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(here)\n\nhere() starts at /Users/harryzhong/Projects/My-Website\n\nload(\"data/kmeans_nfact.RData\")\n\nfiles &lt;- list.files(paste0(here(), \"/projects/spotify-analysis/data/full_history_data\"), \n                    pattern = \"*.json\", \n                    full.names = TRUE)\n\nfull_streaming_history &lt;- foreach(file = files, \n                                  .packages = c(\"jsonlite\"),\n                                  .combine = rbind) %do% {\n                                    fromJSON(file, flatten = TRUE)\n                                  } %&gt;%\n  rename(track_name = \"master_metadata_track_name\",\n         artist_name = \"master_metadata_album_artist_name\") %&gt;%\n  mutate(track_uri = gsub(\"spotify:track:\", \"\", spotify_track_uri),\n         month = ts %&gt;%\n           substring(1, 7) %&gt;%\n           paste0(\"-01\") %&gt;%\n           ymd()) %&gt;%\n  select(-spotify_track_uri) %&gt;%\n  filter(month &gt;= ymd(\"2019-04-01\"))\n\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nif (FALSE) {\n  library(tidyverse)\n  library(here)\n  library(foreach)\n  library(jsonlite)\n}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(foreach)\nlibrary(jsonlite)\n\nload(\"data/kmeans_nfact.RData\")\n\nfiles &lt;- list.files(paste0(here(), \"/projects/spotify-analysis/data/full_history_data\"), \n                    pattern = \"*.json\", \n                    full.names = TRUE)\n\nfull_streaming_history &lt;- foreach(file = files, \n                                  .packages = c(\"jsonlite\"),\n                                  .combine = rbind) %do% {\n                                    fromJSON(file, flatten = TRUE)\n                                  } %&gt;%\n  rename(track_name = \"master_metadata_track_name\",\n         artist_name = \"master_metadata_album_artist_name\") %&gt;%\n  mutate(track_uri = gsub(\"spotify:track:\", \"\", spotify_track_uri),\n         month = ts %&gt;%\n           substring(1, 7) %&gt;%\n           paste0(\"-01\") %&gt;%\n           ymd()) %&gt;%\n  select(-spotify_track_uri) %&gt;%\n  filter(month &gt;= ymd(\"2019-04-01\"))\n\nui &lt;- fluidPage(\n  titlePanel(\"test app\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"index\", \"Choose index\", choices = seq(1, nrow(kmeans_nfact_save))),\n    ),\n    mainPanel(\n      plotOutput(\"cluster_plot\"),\n      plotOutput(\"history_plot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$cluster_plot &lt;- renderPlot({\n    kmeans_nfact_save %&gt;%\n      slice(as.numeric(input$index)) %&gt;%\n      pull(km_plot) %&gt;%\n      print()\n  })\n  \n  output$history_plot &lt;- renderPlot({\n    track_clusters &lt;- kmeans_nfact_save %&gt;%\n      slice(as.numeric(input$index)) %&gt;%\n      pull(km) %&gt;%\n      pluck(1) %&gt;%\n      pluck(\"cluster\") %&gt;%\n      as.data.frame() %&gt;%\n      rownames_to_column(\"track_artist\") %&gt;%\n      rename(cluster = 2) %&gt;% \n      mutate(cluster = paste0(\"Cluster \", cluster)) %&gt;%\n      left_join(full_streaming_history %&gt;%\n                  select(track_name,\n                         artist_name) %&gt;%\n                  na.omit() %&gt;%\n                  distinct() %&gt;%\n                  mutate(track_artist = paste(track_name,\n                                              artist_name,\n                                              sep = \" - \")),\n                .,\n                by = \"track_artist\") %&gt;%\n      select(-track_artist) %&gt;%\n      arrange(artist_name,\n              track_name)\n    \n    cluster_summary &lt;- full_streaming_history %&gt;%\n      select(month,\n             track_name,\n             artist_name,\n             ms_played) %&gt;%\n      na.omit() %&gt;%\n      left_join(track_clusters, \n                by = c(\"track_name\", \"artist_name\")) %&gt;%\n      group_by(month, cluster) %&gt;%\n      summarise(hours_listened = sum(ms_played/(1000*60)))\n    \n    ggplot(cluster_summary, aes(x = month, y = hours_listened, fill = cluster, label = cluster)) +\n      ggtitle(\"Cluster proportion of hours listened\") +\n      xlab(\"Date\") +\n      ylab(\"Proportion\") +\n      geom_bar(position = \"fill\", stat = \"identity\")\n  })\n}\n\nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\n\ndata &lt;- data.frame(\n  index = c(1, 2, 3),\n  value = c(\"one\", \"two\", \"three\")\n)\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      \n    ),\n    mainPanel(\n      tableOutput(\"table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$table &lt;- renderTable({\n    data\n  })\n}\n\nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "goals/index.html",
    "href": "goals/index.html",
    "title": "Goals",
    "section": "",
    "text": "Work in progress.\n\n\n\n\n\ngantt\n    title My Achievements and Future Plans\n    dateFormat  YYYY-MM-DD\n    axisFormat %b-%Y\n\n    section Past\n    Bachelor of Science     :done,    des1, 2019-02-01,2022-11-01\n    Bachelor of Science (Honours)     :done,    des2, 2023-02-01,2024-06-01\n    \n\n    section Future\n    Future task1        :active,  des3, 2023-09-01, 2024-01-01\n    Future task2        :         des4, 2024-02-01, 2024-06-01\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\ncluster_0\n\nPast Achievements\n\n\ncluster_1\n\nFuture Plans\n\n\n\nTask1\n\nTask 1\n2023-01-06 to 2023-05-15\n\n\n\nTask2\n\nTask 2\n2023-06-01 to 2023-12-20\n\n\n\nTask3\n\nTask 3\n2024-01-01 to 2024-06-30\n\n\n\nTask4\n\nTask 4\n2024-07-01 to 2024-12-31\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\ndata &lt;- data.frame(\n    name = c('Past Achievement 1', 'Past Achievement 2', 'Future Plan 1', 'Future Plan 2'),\n    start = as.Date(c('2023-01-06', '2023-06-01', '2024-01-01', '2024-07-01')),\n    end = as.Date(c('2023-05-15', '2023-12-20', '2024-06-30', '2024-12-31'))\n)\n\n# Create the Gantt chart\nggplot(data, aes(x=start, xend=end, y=name, yend=name, color = name)) + \n  geom_segment(linewidth=30) +\n  labs(title='My Achievements and Future Plans', x='Date', y='') +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank()) +\n  geom_text(aes(label=name), hjust=0, vjust=0.5)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "Analysis of My Spotify Data\n\n\n\nK-means\n\n\nR\n\n\n\nCategorisation of my Spotify listening history using k-means clustering\n\n\n\nHarry Zhong\n\n\n\n\n\n\n\n\nNo matching items"
  }
]